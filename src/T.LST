Microsoft (R) Macro Assembler Version 5.00                  2/26/24 23:50:16
                                                             Page     1-1


				.model small 
 0200				.stack 200h ; 512 bytes (book recommended it ¯
				\_(ツ)_/¯) 
				; DOCS - https://stanislavs.org/helppc/idx_inte
				rrupt.html  
				 
				include shapes.inc 
			     C	; TODO: We are assuming good input right now, w
				e likely will need a  
			     C	; validator method to formalize these chunk coo
				rdinates instead of direct 
			     C	; X/Y pass in. Otherwise it may get messy 
			     C	 
			     C	; Multiply Y by 320 to determine which row an e
				lement should draw at 
			     C	; Multiply X by 200 to determine where in the r
				ow an element should be offset 
			     C	 
 0000                        C	.data 
 0000  00                    C	   t_color db 0 
			     C	 
 0000                        C	.code 
			     C	; Fills a chunk (8x8 pixels) with a desired col
				or 
			     C	; PARAMETERS: 
			     C	;  AL : Color to draw with 
			     C	;  DH : X chunk position to draw at 
			     C	;  DL : Y chunk position to draw at  
 0000                        C	dchunk proc far  
			     C	   ; Do the stupid math to know where to draw f
				irst pixel 
 0000  A2 0000 R             C	   mov t_color, al ; Store the color temporaril
				y to use al  
 0003  33 C0                 C	   xor ax, ax    ; Zero out ax for multiplicati
				on use 
 0005  B8 0140               C	   mov ax, 320   ; Hopefully this doesn't overf
				low, there might something in dx 
 0008  F6 E6                 C	   mul dh 
			     C	 
 000A  8B D8                 C	   mov bx, ax    ; Store this value in bx to re
				use ax 
			     C	 
 000C  33 C0                 C	   xor ax, ax 
 000E  B8 00C8               C	   mov ax, 200   
 0011  F6 E2                 C	   mul dl       ; Hopefully this doesn't overfl
				ow, there might something in dx    
 0013  03 D8                 C	   add bx, ax   ; Now the index to start drawin
				g at is in bx 
 0015  33 C0                 C	   xor ax, ax   ; clear 
			     C	 
 0017  A0 0000 R             C	   mov al, t_color      ; Move the color back t
				o draw  
 001A                        C	   draw:  
 001A  26: 89 07             C	      mov es:[bx], ax ; draw pixel 
Microsoft (R) Macro Assembler Version 5.00                  2/26/24 23:50:16
                                                             Page     1-2


			     C	      ; Check if we need to go to next line  
			     C	 
 001D  43                    C	      inc bx          ; go to next pixel 
			     C	 
 001E  E2 FA                 C	      loop draw 
 0020  CB                    C	   ret 
 0021                        C	dchunk endp 
			     C	 
 0001                        C	.data  
 0001  00                    C	   tmp db 0 
			     C	; Draws a horizontal line on the screen, starti
				ng at AH 
			     C	; and extending to the right to fill the chunk 
			     C	; BL : Color 
			     C	; AH : X (pixel) 
			     C	; AL : Y (pixel) 
 0021                        C	.code  
 0021                        C	draw_horizontal_line proc far  
 0021  B9 0008               C	   mov cx, 8 ; 8 pixels per chunk 
 0024  33 D2                 C	   xor dx, dx 
 0026  8B D0                 C	   mov dx, ax ; save coordinate values 
 0028  33 C0                 C	   xor ax, ax ; clear for math 
			     C	 
 002A  B8 0140               C	   mov ax, 320 ; put row length 
 002D  F7 E2                 C	   mul dx ; get pixel offset (Y * row length) 
 002F  8A D3                 C	   mov dl, bl ; save color 
 0031  33 DB                 C	   xor bx, bx 
 0033  8B D8                 C	   mov bx, ax  
 0035  03 C2                 C	   add ax, dx 
			     C	 
 0037                        C	   draw_line: 
 0037  26: 88 17             C	      mov es:[bx], dl 
 003A  43                    C	      inc bx 
 003B  E2 FA                 C	      loop draw_line 
 003D  CB                    C	   ret 
			     C	 
 003E                        C	.code 
 003E                        C	draw_horizontal_line endp 
			     C	; Draws a horizontal line on the screen, starti
				ng at DH 
			     C	; and extending to the right to fill the chunk 
			     C	; BL : Color 
			     C	; AH : X (pixel) 
			     C	; AL : Y (pixel) 
 003E                        C	draw_chunk proc far 
 003E  B9 0008               C	   mov cx, 8 
			     C	 
 0041                        C	   draw_c:    
 0041  51                    C	      push cx 
 0042  50                    C	      push ax 
 0043  9A 0021 ---- R        C	      call draw_horizontal_line 
 0048  58                    C	      pop ax 
 0049  FE C0                 C	      inc al 
 004B  59                    C	      pop cx 
Microsoft (R) Macro Assembler Version 5.00                  2/26/24 23:50:16
                                                             Page     1-3


 004C  E2 F3                 C	      loop draw_c 
 004E  CB                    C	   ret  
			     C	   ; mov t_c, al ; save color 
			     C	   ; mov cx, 8  ; chunk size 
			     C	   ; xor ax, ax ; clear 
			     C	 
			     C	   ; ; X offset 
			     C	   ; mov ax, 200 
			     C	   ; mul dh  
			     C	   ; mov bx, ax 
			     C	 
			     C	   ; draw_c: 
			     C	   ;    xor ax, ax ; Y offset 
			     C	   ;    mov ax, 320 
			     C	   ;    mul dl 
			     C	 
			     C	   ;    add bx, ax 
			     C	   ;    mov al, t_c ; restore color 
			     C	   ;    mov es:[bx], al 
			     C	   ;    inc dl ; move down one row 
			     C	   ;    loop draw_c 
			     C	   ; ret 
 004F                        C	draw_chunk endp 
				 
				 
 0002				.data 
 = A000				    VRAM  equ 0a000h  ; VGA VRAM begins at this
				 location 
 0002  00			    color db 0 
 004F				.code 
 004F				main PROC 
				    ;set video mode  
 004F  B4 00			    mov ah, 00h 
 0051  B0 13			    mov al, 13h ; video mode (320x200, 256 colo
				r) 
				            ; each pixel is one byte in this mo
				de 
				            ; note that pixels are sequential, 
				 
				            ; so pixel 320 is the first pixel i
				n the second row 
 0053  CD 10			    int 10h ; trigger change to video mode 
				 
 0055  B8 A000			    mov ax, VRAM ; move vram to data segment 
 0058  8E C0			    mov es, ax ; es points to VGA memory (es ca
				n only be accessed via register) 
				   
 005A  A0 0002 R		    mov al, color ; color 
 005D  BB 0000			    mov bx, 0 ;pixel offset 0 (none) 
 0060  B9 FA00			    mov cx, 64000 ;pixel count 
				 
				    ; mov bl, 44h ; color yellow 
				    ; xor ax, ax ; set (0, 0) to draw at 
				    ; call draw_horizontal_line 
Microsoft (R) Macro Assembler Version 5.00                  2/26/24 23:50:16
                                                             Page     1-4


 0063  33 C0			    xor ax, ax 
 0065  B0 01			    mov al, 1 
 0067  B4 05			    mov ah, 5 
 0069  B3 44			    mov bl, 44h ; color yellow 
 006B  9A 0021 ---- R		    call draw_horizontal_line 
 0070  33 C0			    xor ax, ax 
 0072  B0 05			    mov al, 5 
 0074  B4 BF			    mov ah, 191 
 0076  B3 44			    mov bl, 44h ; color yellow 
 0078  9A 0021 ---- R		    call draw_horizontal_line 
				 
 007D				    drawloop: 
 007D  26: 89 07		        mov es:[bx], ax ; draw pixel 
 0080  43			        inc bx ; go to next pixel  
 0081  E2 FA			        loop drawloop   
 0083  B3 44			        mov bl, 44h ; color yellow 
 0085  33 C0			        xor ax, ax ; set (0, 0) to draw at 
 0087  9A 0021 ---- R		        call draw_horizontal_line 
 008C  33 C0			        xor ax, ax 
 008E  B0 01			        mov al, 1 
 0090  B4 05			        mov ah, 5 
 0092  B3 44			        mov bl, 44h ; color yellow 
 0094  9A 0021 ---- R		        call draw_horizontal_line 
 0099  33 C0			        xor ax, ax 
 009B  B0 05			        mov al, 5 
 009D  B4 BF			        mov ah, 191 
 009F  B3 44			        mov bl, 44h ; color yellow 
 00A1  9A 0021 ---- R		        call draw_horizontal_line 
				 
 00A6				    awaitkey: ; terminates program on key press
				 
 00A6  B4 10			        mov ah, 10h 
 00A8  CD 16			        int 16h 
 00AA  3C 20			        cmp al, 32 ; space key is pressed, term
				inate 
 00AC  74 17			        je exit 
 00AE  3C 1B			        cmp al, 27 ; escape key is pressed, red
				raw 
 00B0  74 02			        je redraw 
 00B2  EB F2			        jmp awaitkey ; space was not pressed 
				 
 00B4				    redraw: 
 00B4  B9 FA00			        mov cx, 64000 
 00B7  33 DB			        xor bx, bx ; clear offset 
 00B9  33 C0			        xor ax, ax ; clear (usually keydata) 
 00BB  A0 0002 R		        mov al, color ; get last color we drew 
 00BE  04 05			        add al, 5 ; change color 
 00C0  A2 0002 R		        mov color, al ; save as last color draw
				n 
 00C3  EB B8			        jmp drawloop  ; redraw 
				 
 00C5				    exit: ; terminates program 
 00C5  33 C0			        xor ax, ax ; zero out 
 00C7  B4 4C			        mov ah, 4ch ; terminate process code 
Microsoft (R) Macro Assembler Version 5.00                  2/26/24 23:50:16
                                                             Page     1-5


 00C9  CD 21			        int 21h ; trigger exit 
 00CB				main ENDP 
 00CB				END main  
Microsoft (R) Macro Assembler Version 5.00                  2/26/24 23:50:16
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	0003	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	0200	PARA	STACK	'STACK'
_TEXT  . . . . . . . . . . . . .  	00CB	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

AWAITKEY . . . . . . . . . . . .  	L NEAR	00A6	_TEXT

COLOR  . . . . . . . . . . . . .  	L BYTE	0002	_DATA

DCHUNK . . . . . . . . . . . . .  	F PROC	0000	_TEXT	Length = 0021
DRAW . . . . . . . . . . . . . .  	L NEAR	001A	_TEXT
DRAWLOOP . . . . . . . . . . . .  	L NEAR	007D	_TEXT
DRAW_C . . . . . . . . . . . . .  	L NEAR	0041	_TEXT
DRAW_CHUNK . . . . . . . . . . .  	F PROC	003E	_TEXT	Length = 0011
DRAW_HORIZONTAL_LINE . . . . . .  	F PROC	0021	_TEXT	Length = 001D
DRAW_LINE  . . . . . . . . . . .  	L NEAR	0037	_TEXT

EXIT . . . . . . . . . . . . . .  	L NEAR	00C5	_TEXT

MAIN . . . . . . . . . . . . . .  	N PROC	004F	_TEXT	Length = 007C

REDRAW . . . . . . . . . . . . .  	L NEAR	00B4	_TEXT

TMP  . . . . . . . . . . . . . .  	L BYTE	0001	_DATA
T_COLOR  . . . . . . . . . . . .  	L BYTE	0000	_DATA

VRAM . . . . . . . . . . . . . .  	NUMBER	A000	

@CODE  . . . . . . . . . . . . .  	TEXT  _TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  0		
@DATASIZE  . . . . . . . . . . .  	TEXT  0		
@FILENAME  . . . . . . . . . . .  	TEXT  stage		


    191 Source  Lines
    192 Total   Lines
     29 Symbols

  51046 + 449098 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
